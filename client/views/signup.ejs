<!-- Signup Modal -->
<div id="SignupModal" class="modal fade">
	<div class="modal-dialog modal-login">
		<div class="modal-content">
			<form id = "create" action="/examples/actions/confirmation.php" method="post">
				<div class="modal-header">				
					<h4 class="modal-title">SignUp</h4>
					<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
				</div>
				<div class="modal-body">				
					<div class="form-group">
						<label>Username</label>
						<input type="text" class="form-control" required="required">
					</div>
					<div class="form-group">
						<div class="clearfix">
							<label>Password</label>
						</div>
						<input type="password" class="form-control" required="required">
					 </div>
					 <div class="form-group">
						<div class="clearfix">
							<label>Confirm password</label>
						</div>
						<input type="password" class="form-control" required="required">
                     </div>
                   </div>
				<div class="modal-footer justify-content-between">
				   <input type="submit" class="btn btn-primary" value="SignUp" id="e-login-button">
				   <p id="create-result"> </p>
				</div>
			</form>
		</div>
	</div>
</div>  


<script>

import Web3 from 'web3';
import Crud from './contracts/Crud.json';

let web3;
let crud;

const initWeb3 = () => {
  return new Promise((resolve, reject) => {
    if(typeof window.ethereum !== 'undefined') {
      const web3 = new Web3(window.ethereum);
      window.ethereum.enable()
        .then(() => {
          resolve(
            new Web3(window.ethereum)
          );
        })
        .catch(e => {
          reject(e);
        });
      return;
    }
    if(typeof window.web3 !== 'undefined') {
      return resolve(
        new Web3(window.web3.currentProvider)
      );
    }
    resolve(new Web3('http://localhost:9545'));
  });
};

const initContract = () => {
  const deploymentKey = Object.keys(Crud.networks)[0];
  return new web3.eth.Contract(
    Crud.abi, 
    Crud
      .networks[deploymentKey]
      .address
  );
};

const initApp = () => {
  const $create = document.getElementById('create');
  const $createResult = document.getElementById('create-result');
  
  
  let accounts = [];

  web3.eth.getAccounts()
  .then(_accounts => {
    accounts = _accounts;
  });

  $create.addEventListener('submit', (e) => {
    e.preventDefault();
    const name = e.target.elements[0].value;
    const password = e.target.elements[1].value;
    crud.methods.create(name, password).send({from: accounts[0]})
    .then(result => {
      $createResult.innerHTML = New user ${name} successfully created;
    })
    .catch(_e => {
      $createResult.innerHTML = Ooops... there was an error while trying to create a new user...;
    });
  });


document.addEventListener('DOMContentLoaded', () => {
  initWeb3()
    .then(_web3 => {
      web3 = _web3;
      crud = initContract();
      initApp(); 
    })
    .catch(e => console.log(e.message));
});
}

</script>
